############################
# Oh-My-Zsh & Plugins Configuration
############################

export ZSH="$HOME/.oh-my-zsh"
ZSH_THEME="ys"

# History configuration
HISTSIZE=10000
SAVEHIST=10000
HISTFILE=~/.zsh_history
setopt HIST_IGNORE_DUPS
setopt HIST_FIND_NO_DUPS
setopt SHARE_HISTORY

############################
# Tmux Session Management
############################

# Check if we are inside a tmux session
if [ -z "$TMUX" ]; then
  # We are not inside tmux, try to attach to an existing session 0 if it exists
  tmux attach-session -t default 2>/dev/null || tmux new-session -s default
fi

############################
# General Environment Variables
############################

export ENABLE_WASM=
export EDITOR="nvim"
export VISUAL="nvim" 
export SHELL='/usr/bin/zsh'

export EDITOR='vim'

# Language and locale settings
export LC_CTYPE=en_US.UTF-8
export LANG=en_US.UTF-8
export PATH=$HOME/.local/bin:$PATH

############################
# Language and Runtime Settings
############################

# Mise en place
# export MISE_VERBOSE=1
# export RUST_BACKTRACE=1
export MISE_HOME="$HOME/.mise"
# eval "$(~/.local/bin/mise activate zsh --shims)"
eval "$(~/.local/bin/mise activate zsh)"
# export PATH="$HOME/.local/share/mise/shims:$PATH"

# Rust
export PATH=$HOME/.cargo/bin:$PATH

############################
# Zinit Plugin Manager
############################

# Install Zinit if not present
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33}Installing %F{220}ZDHARMA-CONTINUUM %F{33}Plugin Manager...%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone --depth=1 https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33}✓ %F{34}Installation successful.%f" || \
        print -P "%F{160}✗ Installation failed.%f"
fi

# Load Zinit
source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

############################
# Completion System
############################

# Initialize completion system
if [[ -n ${ZDOTDIR}/.zcompdump(#qN.mh+24) ]]; then
    compinit
else
    compinit -C  # Skip integrity check for speed
fi

# Completion styling
zstyle ':completion:*' menu select
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*' special-dirs true
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"

############################
# Zinit Plugins
############################

# Load Zinit annexes
zinit light-mode wait"0" lucid for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust

# Navigation and productivity plugins
zinit wait"0" lucid for \
    blockf atpull"zinit creinstall -q ." \
    zsh-users/zsh-completions

# Syntax highlighting
zinit ice wait"0" lucid atinit"ZINIT[COMPINIT_OPTS]=-C"
zinit light zdharma-continuum/fast-syntax-highlighting

# History search
zinit ice lucid wait"0"
zinit light joshskidmore/zsh-fzf-history-search

# Git tools
zinit ice wait"1" lucid
zinit light paulirish/git-open

# Oh-My-Zsh plugins
zinit wait"1" lucid for \
    OMZP::extract \
    OMZP::sudo \
    OMZP::git \
    OMZP::docker \
    OMZP::docker-compose \
    OMZP::kubectl \
    OMZP::terraform \
    OMZP::python \
    OMZP::rust \
    OMZP::fzf \
    OMZP::direnv \
    OMZP::gh \
    OMZP::git-extras \
    OMZP::gitignore \
    OMZP::golang \
    OMZP::helm \
    OMZP::kind \

############################
# Key Bindings
############################

# Navigation and history search
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
bindkey '^R' fzf-history-widget
bindkey '^[[1;5C' forward-word   # Ctrl+Right
bindkey '^[[1;5D' backward-word  # Ctrl+Left

# Plugin list
plugins=(
  argocd
  ansible
  aws
  bundler
  deno
  direnv
  docker
  docker-compose
  gcloud
  gem
  git
  git-extras
  git-flow
  gh
  gitignore
  golang
  helm
  kind
  kubectl
  man
  mise
  nmap
  node
  npm
  nvm
  pip
  pylint
  pyenv
  python
  rake
  rsync
  ruby
  rust
  screen
  ssh
  ssh-agent
  systemd
  sudo
  supervisor
  systemd
  terraform
  tig
  tmux
  tmuxinator
  torrent
  vscode
  yarn
  zsh-fzf-history-search
)

# Load local Zsh configurations from ~/.zsh.local
if [[ -d "$HOME/.zsh.local" ]]; then
  for file in "$HOME/.zsh.local"/*.zsh; do
    [[ -f "$file" ]] && source "$file"
  done
fi

# Load aliases
if [[ -f "$HOME/.zsh/aliases.zsh" ]]; then
  source "$HOME/.zsh/aliases.zsh"
fi

function reload {
  echo "🔄 Reloading ZSH configuration..."
  source ~/.zshrc
  echo "✅ ZSH configuration reloaded successfully!"
}

# Quick edit and reload zshrc
function zshconfig {
  $EDITOR ~/.zshrc && reload
}

# List all available aliases
function aliases {
  echo "🔍 Your current aliases:"
  alias | sort | grep -v "^_" | bat --style=plain --language=bash
}

function update {
  echo "🔄 Updating your development environment..."
  
  # Update zinit and plugins
  echo "📦 Updating zinit plugins..."
  zinit self-update
  zinit update --parallel
  
  # Refresh completions
  echo "🔄 Refreshing completions..."
  autoload -Uz compinit
  compinit -C
  
  # Update Neovim plugins
  if command -v nvim &>/dev/null; then
    echo "🧩 Updating Neovim plugins..."
    nvim --headless +PlugUpdate +qall
  fi
  
  # Update Oh-My-Zsh
  echo "🐚 Updating Oh-My-Zsh..."
  omz update
  
  # Update mise tools
  if command -v mise &>/dev/null; then
    echo "🛠️  Updating mise tools..."
    mise self-update
    mise upgrade
  fi
  
  # Update system packages if on Ubuntu/Debian
  if command -v apt &>/dev/null; then
    echo "📦 Updating system packages..."
    sudo apt update && sudo apt upgrade -y
  fi
  
  echo "✅ Update complete! Your system is now up to date."
}

############################
# Security
############################

# Pdtm - Project Discovery 
# https://projectdiscovery.io/
export PATH=$PATH:/home/chussenot/.pdtm/go/bin

if command -v glab &>/dev/null; then
  source <(glab completion -s zsh)
  compdef _glab glab
fi

source <(warp-cli generate-completions zsh)

# Additional autocompletions

# Terraform
if command -v terraform &>/dev/null; then
  autoload -U +X bashcompinit && bashcompinit
  complete -o nospace -C $(which terraform) terraform
fi

# AWS CLI
if command -v aws &>/dev/null; then
  complete -C $(which aws_completer) aws
fi

# Docker
if command -v docker &>/dev/null; then
  source <(docker completion zsh)
fi

# ArgoCD
if command -v argocd &>/dev/null; then
  source <(argocd completion zsh)
fi

# Helm
if command -v helm &>/dev/null; then
  source <(helm completion zsh)
fi

# Kubectl
if command -v kubectl &>/dev/null; then
  source <(kubectl completion zsh)
fi

# Cargo/Rust
if [ -f $HOME/.cargo/env ]; then
  source $HOME/.cargo/env
fi

# NPM
if command -v npm &>/dev/null; then
  source <(npm completion)
fi

# Pip
if command -v pip &>/dev/null; then
  eval "$(pip completion --zsh)"
fi

# Mise
if command -v mise &>/dev/null; then
  source <(mise completion zsh)
fi


# Kubectl Krew
export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

############################
# Fuzzy Finder & Directory Navigation
############################

# Jump in directories
[ -f ~/z.sh ] && source ~/z.sh

# General Fuzzy finder
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh


source $ZSH/oh-my-zsh.sh

export FLYCTL_INSTALL="/home/chussenot/.fly"
export PATH="$FLYCTL_INSTALL/bin:$PATH"

fpath+=~/.zfunc; autoload -Uz compinit; compinit
