" vim: set foldmethod=marker :

set nocompatible
filetype off

" Source plug-ins with vim-plug
" see https://github.com/junegunn/vim-plug
runtime plugs.vim

filetype on

" {{{ Basics

set number         " always show line numbers
set hlsearch       " highlight searches by default
set ignorecase     " Do not pay attention to word case when searching
set smartcase      " …unless pattern contains a capital letter
set cursorline     " Show current line with a marker
set autoread       " Automatically reload an externally modified file
set visualbell
set hidden         " Avoid asking to save before hiding
set synmaxcol=800  " Don't try to highlight lines longer than 800 characters.

" No need for Balloon Evaluation
if exists('+noballooneval')
  set noballooneval
endif

if has('mouse')
  set mouse=a
  " Right mouse button pops up a menu, if needed
  set mousemodel=popup
endif

" }}}

" {{{ Indentation

set autoindent
set smartindent
set smarttab
set expandtab
set shiftround    " Indent to closest shiftwidth
set nojoinspaces  " Use 1 space after "." when joining lines instead of 2
set nofoldenable
set tabstop=2
set softtabstop=2
set shiftwidth=2

" }}}

" {{{ Wrapping

" Soft wrapping
" set wrap

" Hard wrapping
set textwidth=79

" Allow formatting of comments with 'gq'
set formatoptions=q

" Automatically insert the current comment leader after hitting <Enter> in
" Insert mode
set formatoptions+=r

" When formatting text, recognize numbered lists.  This actually uses
" 'formatlistpat'.
set formatoptions+=n

" Don't break a line after a one-letter word.  It's broken before it instead
" (if possible)
set formatoptions+=1

" Where it makes sense, remove a comment leader when joining lines.
set formatoptions+=j

" }}}

" {{{ History and backup

if !has('nvim')
  set viminfo='10,:20,\"100,%,n~/.viminfo
endif

set history=1000
set nobackup
set nowritebackup
set noswapfile

" }}}

" {{{ Denops

" autocmd VimEnter * call denops#cache#update(#{reload: v:true})

" }}}

" {{{ Spaces and tabs

set listchars=nbsp:·,tab:»–,trail:·
set list

" }}}

" {{{ Color long lines limit

autocmd BufRead,BufNewFile,BufWinEnter * highlight ColorColumn ctermbg=DarkGrey ctermfg=white

if exists('+colorcolumn')
  if &textwidth != ''
    autocmd BufRead,BufNewFile,BufWinEnter * set colorcolumn=+1
  else
    autocmd BufRead,BufNewFile,BufWinEnter * set colorcolumn=81
  end
else
  au BufRead,BufWinEnter * match ColorColumn /\%81v./
endif

" }}}

" {{{ Status line

set statusline=
set statusline+=%3.3n\                       " buffer number
set statusline+=%f\                          " file name
set statusline+=%h%1*%m%r%w%0*               " flags
set statusline+=\[%{strlen(&ft)?&ft:'none'}, " filetype
set statusline+=%{strlen(&fenc)?&fenc:&enc}%{&bomb?'/bom':''}, " encoding
set statusline+=%{&fileformat}]              " file format
set statusline+=%{fugitive#statusline()}     " show git status
set statusline+=%=                           " right align

" Gutentags
set statusline+=%{gutentags#statusline()}

" Syntastic status line
if !has("nvim")
  set statusline+=%#warningmsg#
  set statusline+=%{SyntasticStatuslineFlag()}
  set statusline+=%*

  set statusline+=\
endif

set statusline+=0x%-8B\                      " current char
set statusline+=%-14.(%l,%c%V%)\ %<%P        " offset

set laststatus=2 " show a status line even if there's only one window

" }}}

" {{{ Whitespace clean-up

" See http://vimcasts.org/episodes/tidying-whitespace/

" Maps {{{
nmap _$ :call Preserve("%s/\\s\\+$//e")<CR>
nmap _= :call Preserve("normal gg=G")<CR>
" }}}

" Code {{{
function! Preserve(command)
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  execute a:command
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

function! StripTrailingWhitespaces()
  call Preserve("%s/\\s\\+$//e")
endfunction
" }}}

" }}}

" {{{ Load key mappings

exec 'source ' . expand("~/.vim/key_mappings/command_line.vim")

" }}}

" {{{ Skeletons

augroup skeletons
  au!
  :autocmd BufNewFile  *.sh        0r ~/.vim/skeletons/skeleton.sh
  :autocmd BufNewFile  *.rb        0r ~/.vim/skeletons/skeleton.rb

  " Go directly to third line and start in insertion mode
  :autocmd BufNewFile  *.rb,*.rake,*.sh :normal 3G
  :autocmd BufNewFile  *.rb,*.rake,*.sh :startinsert
augroup END

" }}}

" {{{ Tags

set tags+=~/.tags,.git/tags,tags

" }}}

" {{{ Markers

function! g:ToggleColorColumn()
  if &colorcolumn != ''
    setlocal colorcolumn&
  else
    setlocal colorcolumn=+1
  endif
endfunction

nnoremap <silent> <leader>cc :call g:ToggleColorColumn()<CR>

" }}}

" {{{ Save with Ctrl-S

" Taken from http://vim.wikia.com/wiki/Map_Ctrl-S_to_save_current_or_new_files

" If the current buffer has never been saved, it will have no name,
" call the file browser to save it, otherwise just save it.
command -nargs=0 -bar Update if &modified
                           \|    if empty(bufname('%'))
                           \|        browse confirm write
                           \|    else
                           \|        confirm write
                           \|    endif
                           \|endif

" Save the current buffer with Ctrl-S in normal, insert or visual selection modes
nnoremap <silent> <C-s> :<C-u>Update<CR>
inoremap <C-s> <C-o>:Update<CR><CR>
vmap <C-s> <Esc>:w<CR>gv

" }}}

" {{{ Splits

" Tips taken from https://robots.thoughtbot.com/vim-splits-move-faster-and-more-naturally#easier-split-navigation

" More natural split opening
" Open new split panes to right and bottom, which feels more natural than Vim’s default:
set splitbelow
set splitright

" }}}

if has("autocmd")
    " reload when entering the buffer or gaining focus
    au FocusGained,BufEnter * :silent! !

    " save when exiting the buffer or losing focus
    au FocusLost,WinLeave * :silent! wall
endif

" {{{ Misc

" Enable Rainbow parentheses
let g:rainbow_active = 1  "0 if you want to enable it later via :RainbowToggle"

" Markdown preview configuration
" I need to figure out a way to use an after/plugin hook for this instead of
" polluting ~/.vimrc
let g:MarkdownPreviewTMP = expand("~/.vim/flavors/changa_markdown-preview.vim/tmp/")
let g:MarkdownPreviewDefaultStyles = expand("~/.vim/flavors/changa_markdown-preview.vim/stylesheets/")

" Encryption
if has("cryptv")
  set cryptmethod=blowfish
endif

if executable("rg")
  set grepprg=rg\ --vimgrep
endif

" }}}

" {{{ Colors

" colorscheme gruvbox
colorscheme brogrammatrix
set background=dark

" }}}

if has("nvim")
  exec 'source ' . expand("~/.vim/neovim.vim")
endif

" {{{ FOOTER - LOCAL CUSTOMIZATIONS

if filereadable(expand("~/.vim/vimrc.local"))
  " This file can be used to override global settings
  exec 'source ' . expand("~/.vim/vimrc.local")
endif

if filereadable(expand("./vimlocal"))
  source .vimlocal
endif

" Load local customizations from ./.vimrc but disable shell execution and write
" operations
" see http://www.ilker.de/specific-vim-settings-per-project.html
set exrc
set secure

" }}}
